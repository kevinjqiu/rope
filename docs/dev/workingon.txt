Refactoring And Small Stories
=============================

- Adding a ``special_args`` parameter to `AbstractFunction.get_param_names()`
- Renaming `PyDefinedObject._get_ast()` to `get_ast()`
- What if the function passed to a property is not a function
- Simple handling of `ListComp` and `GenExpr`
- Showing the pydoc of superclass methods in show pydoc if it overrides them
- Refactor codeassist to put doc methods in a class
- Showing superclass in show pydoc

* Not saving normal SOIed returned in callinfo
* Should `ParameterName` save information?
* Not proposing invalid textuals in `_CallInformationOrganizer`

* Not sending ``*args`` and ``**kwds`` in DOI
* Cleaning up `rope.base.pyobjects`

* Is `rope.base` supposed to be thread safe?  which parts?
* Evaluate function parameter defaults in staticoi?
* Is throwing `IsBeingInferredException` a good thing?  Can't we
  return something instead?
* Duplication between `AssignedName` and `EvaluatedName`, `PyFunction`
  for inferring objects
* Not ignoring the first argument for builtin types
* What to do for builtin functions

* Generator list comprehension support
* Update `rope.base.oi` docs
* Using sqlite3 to prevent holding information in memory? mocks?
* Enhancing object textual form to include new types

* Using `AbstractXxx` classes for the objects for which the source is not
  available
* Inferring the type list comprehensions or generator expressions hold
* Textual matches support; like grep?
* Adding an option to rename refactoring to rename all occurrences of a name
  regardless of whether they are the same pyname or not?
* ``enable_doi`` config
* Completion in module entries
* Faster find file in large projects
* Decorators and method refactorings
* Document how to move fields


Remaining Small Stories
=======================

Base:

* Lambdas as functions; consider their parameters
* Sorting names in from import list
* When running `inlinetest` modules we get
  ``Exception exceptions.SystemError: 'error return without exception set'
    in <generator object at 0xb7173aec> ignored``
* Only saving diffs in `ChangeContents`
* Undoing `RemoveResource`; It's not used by refactorings
* Caching calculated parameters and returned object in `PyFunction`\s
* Allowing running code to call rope functions while rope is running?
* Importing star and removing self imports; stack overflow
* `PyClass.superclasses` should be concluded data
* Handling `AssList` for inline variable and encapsulate field
* Import addition when adding a relative to an absolute import

UI and IDE:

* A completing text widget for dialogs; `Completing(name, list, handle)`
* Goto definition for ``"# comment.\na_var"``
* Showing properties in quick outline
* Changing ``C-a C-a`` to move to the first character in the line
* ``M-a`` and ``M-e``
* ``C-l`` and ``M-r``
* Comments should be indented
* Decide when to use `difflib` in `Editor.set_text` based on the
  number of changes

Others:

* Separating UI and functional tests from unit tests
* Better `ropetest` package structure
