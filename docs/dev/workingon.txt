Removing `PythonRefactoring`
============================

* Changing uses of `PythonRefactoring` to use `rope.refactor` modules
* Adding a place for saving undo information
* What to do with import utils
* Documenting the refactorings `rope.refactor` submodules provide
* Updating references to `PythonRefactoring` and
  `PyCore.get_refactoring` to use the new objects.


Storing Different Return Types For Different Set Of Arguments
=============================================================

- ignoring ``*args`` and ``**kwds`` in runmod


Remaining Stories
=================

* Caching calculated parameters and returned object in `PyFunction`\s
* Handling the return type of generator functions
* Fixing multiple function definition problems
* Docs for builtin functions
* Allowing running code to call rope functions while rope is running?
* Importing star and removing self imports; stack overflow
* Extract constant
* What to do if a file is removed while editing
* Allowing non-existent resources?
* Problems for inside list comprehension assists
* Performing actions on individual functions or imports
* `PyClass.superclasses` should be concluded data
* Better `ropetest` package structure
* Decide when to use `difflib` in `Editor.set_text`
* Handling `AssList` for inline variable and encapsulate field

* Considering logical lines in `rope.codeanalyze`
* Reporting unhandled exceptions as error dialogs in the GUI
* Better move dialog; complete modules names; use `editor._CompletionListHandle`
* Extract method and return statements
* Import addition when adding a relative with an absolute import
* Caching `PyCore.classes`
* Handling `Scope.lookup` for ::

    class A(object):
        a_var = 10
        another_var = a_var

* `rope.exceptions` should only contain user exceptions that are
  thrown from public classes like `Project`, `PyCore`, `Refactoring`
* Goto definition for ``"# comment.\na_var"``
