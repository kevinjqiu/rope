Better Parameter SOI
====================

- Preventing OI recursions

* Eliminating `get_base_type()`
* Using `AbstractXxx.get_doc()`
* What to do about 'Unknown' base type
* Docs for builtin functions and properties
* Cleaning up `pyobjects`
* Checking `PyDefinedObject._get_ast()` usages
* Renaming `PyDefinedObject._get_ast()` to `get_ast()`

* Is throwing `IsBeingInferredException` a good thing?  Can't we
  return something instead?
* Duplication between `AssignedName` and `EvaluatedName`, `PyFunction`
  for inferring objects
* Not ignoring the first argument for builtin types
* What to do for builtin functions

* Adding `object` base object
* Adding `object` and `type` builtins
* Showing the pydoc of superclass methods in show pydoc if it overrides them
* Update `rope.base.oi` docs
* Invalidating old concluded data
* Using sqlite3 to prevent holding information in memory? mocks?
* Enhancing object textual form to include new types
* Goto definition for builtins raises exception
* `evalutate.get...` was changed to `rope.base.evaluate.get...` in moving
* Move failed to import old module

* ``enable_doi`` config
* Completion in module entries
* Faster find file in large projects
* Decorators and method refactorings
* Unifying ``x.get_type() == get_base_type('y')``, ``isinstance(x, PyY)``
* Document how to move fields


Remaining Small Stories
=======================

Base:

* Lambdas as functions; consider their parameters
* Sorting names in from import list
* When running `inlinetest` modules we get
  ``Exception exceptions.SystemError: 'error return without exception set'
    in <generator object at 0xb7173aec> ignored``
* Only saving diffs in `ChangeContents`
* Undoing `RemoveResource`; It's not used by refactorings
* Caching calculated parameters and returned object in `PyFunction`\s
* Allowing running code to call rope functions while rope is running?
* Importing star and removing self imports; stack overflow
* Extract constant
* `PyClass.superclasses` should be concluded data
* Handling `AssList` for inline variable and encapsulate field
* Import addition when adding a relative to an absolute import

UI and IDE:

* A completing text widget for dialogs; `Completing(name, list, handle)`
* Goto definition for ``"# comment.\na_var"``
* Showing properties in quick outline
* Changing ``C-a C-a`` to move to the first character in the line
* ``M-a`` and ``M-e``
* Comments should be indented
* Decide when to use `difflib` in `Editor.set_text` based on the
  number of changes

Others:

* Separating UI and functional tests from unit tests
* Better `ropetest` package structure
