Supporting Generator Functions
==============================

- Update `rope.base.oi` docs
- Not proposing invalid textuals in `_CallInformationOrganizer`
- Removing duplication between `AssignedName`, `EvaluatedName`
  and `PyFunction` for inferring objects
- `Iterator_to_textual` and the reverse
- Adding `Generator` builtin
- `iter` builtin function
- Refactoring builtin module a bit

* Refactoring callinfo transformations
* Transforming all `PyObject`\s to textuals; trying their super
  classes till `PyObject`, giving up then.
* Handling generators in DOI?
* Returning a `Generator` for functions with unknown return type
* Passing `iterators` in DOI?

* Chaning `callinfo` to match not exactly the same but similar args
* Is throwing `IsBeingInferredException` a good thing?  Can't we
  return `get_unknown()` instead?
* Evaluate function parameter defaults in staticoi?

* Using `sqlite3` to prevent holding information in memory? mocks?
* Is `rope.base` supposed to be thread safe?  which parts?
* Textual matches support; like grep?
* ``enable_doi`` config
* Completion in module entries
* Faster find file in large projects
* Decorators and method refactorings
* Document how to move fields


Remaining Small Stories
=======================

Base:

* Lambdas as functions; consider their parameters
* Sorting names in from import list
* When running `inlinetest` modules we get
  ``Exception exceptions.SystemError: 'error return without exception set'
    in <generator object at 0xb7173aec> ignored``
* Only saving diffs in `ChangeContents`
* Undoing `RemoveResource`; It's not used by refactorings
* Caching calculated parameters and returned object in `PyFunction`\s
* Allowing running code to call rope functions while rope is running?
* Importing star and removing self imports; stack overflow
* `PyClass.superclasses` should be concluded data
* Handling `AssList` for inline variable and encapsulate field
* Import addition when adding a relative to an absolute import

UI and IDE:

* A completing text widget for dialogs; `Completing(name, list, handle)`
* Goto definition for ``"# comment.\na_var"``
* Showing properties in quick outline
* Changing ``C-a C-a`` to move to the first character in the line
* ``M-a`` and ``M-e``
* ``C-l`` and ``M-r``
* Comments should be indented
* Decide when to use `difflib` in `Editor.set_text` based on the
  number of changes

Others:

* Separating UI and functional tests from unit tests
* Better `ropetest` package structure
