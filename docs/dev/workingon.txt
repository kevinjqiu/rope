Supporting Lists, Dicts And Sets
================================

- ``l = [C(), C()]``
- ``a_var = l.pop()``
- ``a_var = l[x]``
- ``a_list = l[x:y]``
- ``__iter__``
- ``for x in l:``
- lists and DOI
- ``d[x]``
- ``d.pop``
- ``d.keys``
- ``d.values``
- ``d.iterkeys``
- ``d.itervalues``
- ``for x in d``
- ``d.copy``
- dicts and DOI
- ``a, b = a_tuple``
- ``a, b = a_list``
- ``d.items``
- ``for x, y in l:``
- ``a = (C1(), C2())``
- tuples and DOI
- add builtin names to global scopes
- sets


Remaining Stories
=================

* Allowing running code to call rope functions while rope is running?
* Importing star and removing self imports; stack overflow
* Definition location for variables inside loops
* Change relative imports to ``2.5`` style
* Extract constant
* What to do if a file is removed while editing
* Allowing non-existent resources?
* Problems for inside list comprehension assists
* Performing actions on individual functions or imports
* `PyClass.superclasses` should be concluded data
* Better `ropetest` package structure
* Decide when to use `difflib` in `Editor.set_text`
* Handling `AssList` for inline variable and encapsulate field
* ``break`` and ``continue`` in extract method

* Considering logical lines in `rope.codeanalyze`
* Reporting unhandled exceptions as error dialogs in the GUI
* Better move dialog; complete modules names; use `editor._CompletionListHandle`
* Extract method and return statements
* Import addition when adding a relative with an absolute import
* Caching `PyCore.classes`
* Handling `Scope.lookup` for ::

    class A(object):
        a_var = 10
        another_var = a_var

* `rope.exceptions` should only contain user exceptions that are
  thrown from public classes like `Project`, `PyCore`, `Refactoring`
* Goto definition for ``"# comment.\na_var"``
