Project History
===============

- Handling Lambdas
- Remove `Resource.observers`
- Renaming `Resource._get_real_path()` to `Resource.real_path`
- Undoing `MoveResource` when moving a file to a folder
- Adding `historytest` to `runtests`
- Removing `rope.ui.refactor._get_refactoring`
- Removing `PythonRefactoring` occurrences
- Changing refactorings to get project instead of pycore
- Forcing `ChangeSets` to have a description
- Import addition removes spaces after imports

* Adding imports eats the blank lines after it
* Returning None from builtin:312 and builtins:292
* evaluate:184 builtins:329
* inline:41 inline:26 refactor:633 None and get_pyname
* Moving `rope.refactor.change` to `rope.base`
* Performing import actions after moving modules
* Updating docs
* Limiting the number of changes in the undo list
* Showing the description of a change when undoing/redoing
* Undo/redo list underflow
* Undoing `Resource.remove()`
* Renaming `Resource.get_path()` to `Resource.path`?
* Renaming `Resource.get_name()` to `Resource.name`?
* Separating undos; Editing history and file history
* Docs for properties
* Lambdas as functions


Remaining Small Stories
=======================

* Default maxlength and maxdots for handling long imports
* Showing properties in quick outline
* Comments should be indented
* Caching calculated parameters and returned object in `PyFunction`\s
* Handling the return type of generator functions
* Fixing multiple function definition problems
* Docs for builtin functions
* Allowing running code to call rope functions while rope is running?
* Importing star and removing self imports; stack overflow
* Extract constant
* What to do if a file is removed while editing
* Allowing non-existent resources?
* Problems for inside list comprehension assists
* Performing actions on individual functions or imports
* `PyClass.superclasses` should be concluded data
* Better `ropetest` package structure
* Decide when to use `difflib` in `Editor.set_text`
* Handling `AssList` for inline variable and encapsulate field
* Considering logical lines in `rope.codeanalyze`
* Reporting unhandled exceptions as error dialogs in the GUI
* Better move dialog; complete modules names; use `editor._CompletionListHandle`
* Extract method and return statements
* Import addition when adding a relative with an absolute import
* Caching `PyCore.classes`
* `rope.exceptions` should only contain user exceptions that are
  thrown from public classes like `Project`, `PyCore`, `Refactoring`
* Goto definition for ``"# comment.\na_var"``
