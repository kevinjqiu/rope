==============
 rope stories
==============

For an overview of possible future goals of rope have a look
at `future.txt`_ file.

.. _future.txt: future.html


Stories
=======


> Unestimated Stories


* Configuring keys


* Configuring fonts


* Showing syntactical errors


* Editor folding


* Variable indentation and tab size


* Having multiple clipboards


* reST support inside pydocs


* reST codeassists


* Adding tool bar


* Commanding buffer


* Last edit location; C-q


* Replacement; M-%


* Remembering last open project


* File Encodings


* Commenting and uncommenting lines


* Enhancing searching

  * End the search when some other key sequence is typed
  * C-s C-s should start the last search
  * Search history; BackSpace should go back to the matches found before
  * Starting from begining when end of file is reached
  * Showing failed searches


* Go to matching parenthesis


* Python C extensions


* User specified source folders
  You should save this project specific information somewhere. How should
  guessed source folders be used.


* Enhancing editor

  * Select all; C-x h
  * Fixed places for StatusTexts


* Indenting a range of file


* Better multi-sequence key event handling


* Optimizing StatementRangeFinder
  Add CachedLines and not starting from the start of the lines


* Auto-importing modules
  Hold the list of project classes and import them automatically
  in codeassist


* Zip imports


* Auto completion type

  * Inserting or overwriting
  * Inserting common prefixes


* Showing function signature when calling


* ``global`` keyword issues for pycore


* reST goto definition


* reST outlines


* Static type inference


* Updating similarly named variables and methods in rename refactoring


* Enhancing editor

  * Clearing selection if something happens
  * Unifying builtin and emacs-style selections; if selection
    is active do the builtin cut and paste


* Auto-completing function parameter names when calling


* Code contexts; context_finder.get_context(text, offset)
  This can be used when proposing code assists.


* Formating Code


* Local history


* What to do when the program has syntax errors for code assists


* Packages should be filtered
  Do not show submodules that are not imported yet as attributes.


* Pull up method


* Push down method


* Show PyDoc reST highlighting


* Better list and tree navigation
  Add filter texts and selection texts to trees and lists.


* Add import


* Enhancing module running

  * Showing running status in the GUI
  * Printing output
  * Getting input
  * Customizing CWD and parameters
  * Running last run


* Replace method with method object refactoring


* Analyzing function decorators


* Introduce redirection


* Removing imports from the same module


* Moving fields/methods to attribute classes


* Changing signature in class hierarchies


* Handling builtin functions and types


* View type hierarchy


* Sorting imports; standard, third party, project


* Open Type; C-T


* Find occurances


* Adding ignored file patterns in projects


> Public Release 0.4m3 : December 17, 2006


* Extending and having more control on file reading and writing


* Introduce parameter
  Change global accesses or attributes accesses to parameters
