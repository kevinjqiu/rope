========================
 rope, a Python IDE ...
========================

Stories
=======

* Organize imports @ 2


* Add import @ 2


* Variable indentation and tab size @ 1


* Find occurances @ 4


* Configuring keys @ 2


* Configuring fonts @ 1


* Showing syntactical errors @ 3


* Editor folding @ 4


* Having multiple clipboards @ 2


* Adding tool bar @ 1


* Commanding buffer @ 4


* Subversion support using pysvn @ 3


* Rename function @ 2


* Move a class to another module @ 3


* Find matching parens @ 1


* Last edit location; C-q @ 2


* Running unit tests @ 3
  Add a graphical view for running tests.


* Enhance open dialog @ 1


* Replacement; M-% @ 1


* Save as and save all; C-x C-w, C-x s @ 1


* Remembering last open project @ 1


* File Encodings @ 2


* Static type inference @ 6


* Commenting and uncommenting lines @ 1


* Enhancing searching @ 1

  * End the search when some other key sequence is typed
  * C-s C-s should start the last search
  * Search history; BackSpace should go back to the matches found before
  * Starting from begining when end of file is reached
  * Showing failed searches


* Go to matching parents @ 1


* Enhancing module running @ 2

  * Showing running status in the GUI
  * Printing output somewhere
  * Getting input from somewhere
  * Customizing CWD and parameters
  * Running last run


* User specified source folders @ 2
  You should save this project specific information somewhere. How should
  guessed source folders be used.


* Enhancing syntax highlighting @ 1

  * Only highlighting the changed region
  * Extend highlighting region while highlighting if necessay
  * Highlighting after cut, paste, undo and redo
  * Use Modified event for updating highlighting only when necessary


* Enhancing menu @ 1

  * Disable inaccessable items
  * Showing keyboard short-cuts in front of menu items


* Enhancing editor @ 1

  * Kill line; C-k
  * Select all; C-x h
  * Go to line
  * Fixed places for StatusTexts


* Having different strategies for selecting next/prev words @ 1


* Enhancing auto indentation @ 1

  * Indenting a range of file
  * Removing extra spaces
  * Separating entering and correcting indentation?


* Dynamic type inference @ 3


* Changing next/prev word to stop on underline and capital letters @ 1


* Rename module refactoring @ 2


* Better New ... Dialogs @ 2
  Better folder and module selection. Completing or selecting from a list.


* Refactoring Core @ 1

  * Refactor editor._goto_definition; not using Core.get_core()
  * Refactor Core; Only use EditorManager when working with the Editors


* Enhancing editor @ 2

  * Clearing selection if something happens
  * Unifying builtin and emacs-style selections; if selection
    is active do the builtin cut and paste
  * Edit menu: cut, paste, undo, redo, revert
  * Showing modified file status
  * Handle MYClass style names in next/prev word


* Auto-completing inherited methods @ 2


* Better multi-sequence key event handling @ 2


* Optimizing StatementRangeFinder @ 1
  Add CachedLines and not starting from the start of the lines


* Auto-importing modules @ 3
  Hold the list of project classes and import them automatically
  in codeassist


* Better list and tree navigation @ 1
  Add filter texts and selection texts to trees and lists.


* Local history @ 4


* Open Type; C-T @ 3


* Compound statements and auto-completion @ 1
  Completions for for-loop, except, lambda and with variables


* Auto completion type @ 2

  * Inserting or overwriting
  * Inserting common prefixes


* Enhancing auto-completion @ 1

  * What to do when the program has syntax errors
  * Sorting proposals


* We know the type of list and keyword args @ 1


* Complete as you type @ 2
  Update proposal list while typing.


* Handle circular from-imports @ 1


* Showing function signature when calling @ 1


* Show PyDoc @ 2


* AssList and AssTuple assignments @ 1


* 'global' keyword issues for pycore @ 1


* Read __init__.py of packages @ 2


* Auto completion contexts; strings, comments, imports, functions and ... @ 2


* Auto-completing function parameter names when calling @ 2


* We know the type of ``var = AClass()`` @ 2


* Out of project modules @ 2
  Modules that cannot be found in the project and builtins


* Formating Code @ 4
  Writing ASTs


* Rename class @ 3


> Public Release 0.2pre4 : July 2, 2006


* Rename local variable @ 2


Remaining Stories
=================
* Change program goals and description; principles.html
  Go toward refactoring and ... library rather than an IDE?
* Migrating to sourceforge SVN before 0.3 release
  SF repository; How to synchronize local SVN with SF SVN?
* Should workingon.txt be under version control?
* Functional tests
* Logo
* Project resource consistency; What if it is deleted after being created?

