We know the type of ``var = AClass()`` @ 2
==========================================

- Classes defined in a bigger scope
- self.var = AClass()
- Assigns in the class bodies

* Not renaming function keyword names
* Equality of two objects of the same type?
* Only looking in the holding scope range
* Using LineOrientedSourceTools in GUI; requires it to use Lines
* Reloading changed editors after refactorings; fileeditor should be a resource visitor
* Names in strings or comments
* Having only one Refactoring instance for a project?
* PyObject equality check; Value objects?
* PyName equality check; Value objects?

* Optimizing holding scope search ?
* Elimination of source_code.split('\n')
* Refactor `_ScopeVisitor.visitFrom` and visitImport
* A TreeViewer is an EnhancedList
* Folders and change_observers?
* Code-assist proposal names should not be so long?
* PyNames with None object
* Refactor pycore; So many kinds for Modules; eliminate checking module.is_package?
* Removing duplications in tests in codeassist and pycore scopes
* Consider using `StatementRangeFinder` in highlight module?
* Updating editor when file changes at disk?
* Caching a few recent `PyCore.get_string_modules` in codeassist or pycore?



Before 0.2 Release
==================
* GUI testing redux; make a ropefunctest directory?; rename ropetest to ropeunittest?
* Better editor changing dialog; use uihelpers module
* Enhancing highlighting
* Profiling to find the bottlenecks
* Document features added since release 0.1
* Better homepage


Remaining Stories
=================
* Directories should contain __init__.py to be packages in codeassist?
* Code assists on relative imports?
* Python C extensions?
* Remote pair programming support?
* Separating ui and core modules and packages?

  * Decide which modules are the domain and which are the presentation
  * Should editing tools access Editor directly? Which of them?
  * Specifing the type of each story; UI or Core
  * Dividing week time; 5/7 for core and 2/7 for UI

* The same pattern for module names; ~ing or ~ or ~er

