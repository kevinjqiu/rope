Auto completion after "."s @ 4
==============================


- Change from-import code assist to use PyCore
- Project.pycore
- Scope.lookup(name) it is recursive
- Should Scope.get_names return all of the visible names in a scope?
- Auto completion after dots
- Resource.__hash__, Resource.__eq__
- Factory methods for creating Functions, Classes, Modules
- Holding ASTs in PyObjects and creating attributes only when needed
- Handle circular imports

* Inlining pycore._create_*
* PyNames with None object
? PyObject might have additional information based on their types; visitor; checking types in many places
* Handle circular from-imports
* From-import non existance
? Refactor FunctionScope.get_scopes and get_names
* Getting children only when necessary, invalidating, Resource.add_change_observer; File and Folder
* Better Completion proposals kind to ease transformation
? Not accessing pyname.object
* Refactor pycore and codeassist
? not_found_module.is_package
? A separate module for scopes
? PyObject equality check; Value objects
* Removing duplications in tests in codeassist and pycore scopes

? Builtins and scopes
? CodeAssist -> PythonCodeAssist; ICodeAssit -> CodeAssist
? We know the type of self
? We know the type of list and keyword args
? Using inspect on modules that cannot be found in the project
? Don't look for local variable completions
? Add PythonHierarchy.create_element(Resource)
* Using os.path.normpath
? What to do for AssList and AssTuple AST nodes
? Next/Prev words should stop at start/end of the line
? Consider using StatementRangeFinder in highlight module
? Move Project.find_module and find_package to PyCore
? Move Project.create_module and create_package to PyCore
* Correcting indentation on '\n ${cursor}   def f():\n    pass\n'; cursor changes its line
* 'super' codeassist super(${class}, self)


Before 0.2 Release
==================
* GUI testing redux; make a ropefunctest directory; ? rename ropetest to ropeunittest
* Better editor changing dialog; use uihelpers module
* More builtin templates; hash, eq
* Enhancing highlighting
* Profiling to find the bottlenecks
* Document features added since release 0.1



Remaining Stories
=================
? From-import might cache module global variables
? Directories should contain __init__.py to be packages in codeassist
? Auto-completion on relative imports
? Python C extensions
? Better version number selection
? Remote pair programming support
? Separating ui modules and packages
  ? Decide which modules are the domain and which are the presentation
  ? Should editing tools access Editor directly? Which of them?
  ? Specifing the type of each story; UI or Core
? The connection between ASTs, module hierarchies and type databases

