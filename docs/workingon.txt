Refactor
========

* Refactor `rope.refactor.move` and `rope.codeanalyze` modules


Move a Class/Function to Another Module
=======================================

- Removing out of date imports

* Raise an exception when moving a non-global element
* What to do when destination is a folder
* Moving used imports by moving from the source class
* Preventing circular imports

* Considering already imported names in `ModuleWithImport.filter`
* More tests for `rope.codeanalyze.WordRangeFinder` methods; can we
  use ASTs


Remaining Stories
=================

* Asking import kind for introduce factory and move refactoring
* Import addition when adding a relative with an absolute import
* Changing rope short description to ``a python refactoring IDE ...``
* Test `difflib` for `Editor.set_text`
* Caching `PyCore.classes`
* Handling `Scope.lookup` for ::
  
    class A(object):
        a_var = 10
        another_var = a_var

* Showing function signature in show doc
* Preferring `DefinedName`\s in attribute code assists
* Transform module to package refactoring and relative imports
* `rope.exceptions` should only contain user exceptions that are
  thrown from public classes like `Project`, `PyCore`, `Refactoring`
* Eliminating `Editor.refactoring`
* Calling `sys.settrace` for all threads in `rope.runmod` module
* Adding ``show_what_rope_can_do`` file
* Keyboard shortcuts for new features
* Function keywords and extract method
* Showing initial name in rename dialogs
* Faster implementation of `GlobalScope.get_inner_scope_for_line`
* Performing refactorings based on the object of the pyname
* Goto definition for ``"# comment.\na_var"``
* Better editor changing dialog; use uihelpers module
* Slow `GraphicalEditor._get_offset`
* GUI testing redux; make a functests directory?; rename ropetest to unittests?
