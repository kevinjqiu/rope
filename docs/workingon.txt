Auto-completing "self."s @ 4
============================

- Better attributes names in pycore classes
- Introduction of PyName
- Nested modules
- What if the element does not exist
- Making modules from strings
- Imports and pycore
- PyName.get_attributes() and PyName.get_type()
- PyName._has_block(), PyName._get_ast()
- Classes and functions defined in functions

* Making scopes using PyNames
  * Function parameters and scopes
  ? Builtins and scopes
  * find_scope(line, indents)
  * Refactor pycore
? Factory methods for creating Functions, Classes, Modules
? Should Scope.get_names return all of the visible names in a scope?
* Handle circular imports
? not_found_module.is_package
? PyObject might have additional information based on their types; visitor
  * Function types should have args, defaults, keywords attributes
* Getting children only when necessary, invalidating, Resource.add_change_observer
? PyObject equality check; Value objects
? A separate module for scopes

? Using inspect on modules that cannot be found in the project
* Project.pycore
* Change from-import code assist to use PyCore
? Don't look for local variable completions
? Add PythonHierarchy.create_element(Resource)
* Using os.path.normpath
? What to do for AssList and AssTuple AST nodes
? Next/Prev words should stop at start/end of the line
? Consider using StatementRangeFinder in highlight module
? Move Project.find_module and find_package to PyCore
? Move Project.create_module and create_package to PyCore
* Correcting indentation on '\n ${cursor}   def f():\n    pass\n'; cursor changes its line
* 'super' codeassist super(${class}, self)


Before 0.2 Release
==================
* GUI testing redux; make a ropefunctest directory; ? rename ropetest to ropeunittest
* Better editor changing dialog; use uihelpers module
* More builtin templates; hash, eq
* Enhancing highlighting
* Profiling to find the bottlenecks
* Document features added since release 0.1



Remaining Stories
=================
? From-import might cache module global variables
? Directories should contain __init__.py to be packages in codeassist
? Auto-completion on relative imports
? Python C extensions
? Better version number selection
? Remote pair programming support
? Separating ui modules and packages
  ? Decide which modules are the domain and which are the presentation
  ? Should editing tools access Editor directly? Which of them?
  ? Specifing the type of each story; UI or Core
? The connection between ASTs, module hierarchies and type databases

