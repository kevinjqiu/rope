Complete ``AClass(param).a_``
=============================

1. Find the statement
2. Parse the statement
3. Walk the statement

Statements are: 
1. Atoms
2. Primaries and operators
3. Simple statements
4. Compound statements

* WorkRangeFinder should return one string?

* Names in strings or comments
* Using ScopeNameFinder in _CodeCompletionCollector
* Changing HoldingScopeFinder to get source_code instead of lines
* Using SourceLinesAdapter in LineOrientedSourceTools
* LineOrientedSourceTools should be more powerful; Elimination of source_code.split('\n')
* Optimize SourceLinesAdapter methods
* More work on WordRangeFinder._get_statment_start; merging with StatementRangeFinder?

* Only looking in the holding scope range for renaming
* Having only one Refactoring instance for a project?
* PyObject and PyName equality checks; Value objects?
* Refactor pycore; So many kinds for Modules; eliminate checking module.is_package?
* Consider using `StatementRangeFinder` in highlight module?



Before 0.2 Release
==================
* GUI testing redux; make a ropefunctest directory?; rename ropetest to ropeunittest?
* Better editor changing dialog; use uihelpers module
* Enhancing highlighting
* Profiling to find the bottlenecks
* Document features added since 0.1 release
* Add a simple tutorial
* Better homepage


Remaining Stories
=================
* Directories should contain __init__.py to be packages in codeassist?
* Code assists on relative imports?
* Python C extensions?
* Remote pair programming support?
* Separating ui and core modules and packages?

  * Decide which modules are the domain and which are the presentation
  * Should editing tools access Editor directly? Which of them?
  * Specifing the type of each story; UI or Core
  * Dividing week time; 5/7 for core and 2/7 for UI

* The same pattern for module names; ~ing or ~ or ~er

