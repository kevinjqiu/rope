Move a Class/Function to Another Module
=======================================

- Moving imports used by the moving element to the destination
- Importing names used by the moving element in the destination

* Moving and relative imports
* Considering already imported names in `ModuleWithImport.filter` and
  for `ModuleWithImports.expand_from_imports`::
  
  ...
  def can_select(name):
      if name in unbound_names and name not in already_imported:
          already_imported.add(name)
          return True
      return False
  for import_statement in reversed(all_imports):
      import_statement.filter(can_select)
  ...



Before 0.3m4
============

* Refactor `rope.importutils`
* Refactor `rope.refactor.move`
* Refactor `rope.codeanalyze`
* Showing function signature in show doc
* Update homepage and docs


Remaining Stories
=================

* Asking import kind for introduce factory and move refactoring
* Import addition when adding a relative with an absolute import
* Test `difflib` for `Editor.set_text`
* Caching `PyCore.classes`
* Handling `Scope.lookup` for ::
  
    class A(object):
        a_var = 10
        another_var = a_var

* Preferring `DefinedName`\s in attribute code assists
* `rope.exceptions` should only contain user exceptions that are
  thrown from public classes like `Project`, `PyCore`, `Refactoring`
* Eliminating `Editor.refactoring`
* Calling `sys.settrace` for all threads in `rope.runmod` module
* Keyboard shortcuts for new features
* Function keywords and extract method
* Showing initial name in rename dialogs
* Faster implementation of `GlobalScope.get_inner_scope_for_line`
* Performing refactorings based on the object of the pyname
* Goto definition for ``"# comment.\na_var"``
* Slow `GraphicalEditor._get_offset`
* GUI testing redux; make a functests directory?; rename ropetest to unittests?
