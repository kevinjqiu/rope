Out of project modules @ 28h
============================

- Using absolute paths
- Adding OutOfProjectTest to suite()
- Test get_child, has_child
- Out of project resources should be reference objects
* zip imports

Out Of Project Resources
------------------------

1. Special resource for out of project files
2. Finding the wanted module
3. Read only files and buffers

There seems to be many obstacles for supporting out of project resources.
Possible approaches:

1. Reimplement `Resource`s so that they know nothing about whether the file
   is in the project or not. They should only hold real address.

2. Derive new subclasses from `Resource` class.




Before 0.2 Release
==================
* GUI testing redux; make a ropefunctest directory?; rename ropetest to ropeunittest?
* Better editor changing dialog; use uihelpers module
* Enhancing highlighting
* Profiling to find the bottlenecks
* Document features added since 0.1 release
* Add a simple tutorial
* Better homepage


Remaining Stories
=================
* Optimize SourceLinesAdapter methods
* More work on WordRangeFinder._get_statment_start; merging with StatementRangeFinder?
* Only looking in the holding scope range for renaming
* Having only one Refactoring instance for a project?
* PyObject and PyName equality checks; Value objects?
* Refactor pycore; So many kinds for Modules; eliminate checking module.is_package?
* Consider using `StatementRangeFinder` in highlight module?
* Directories should contain __init__.py to be packages in codeassist?
* Code assists on relative imports?
* Python C extensions?
* Remote pair programming support?
* Separating ui and core modules and packages?

  * Decide which modules are the domain and which are the presentation
  * Should editing tools access Editor directly? Which of them?
  * Specifing the type of each story; UI or Core
  * Dividing week time; 5/7 for core and 2/7 for UI

* The same pattern for module names; ~ing or ~ or ~er

